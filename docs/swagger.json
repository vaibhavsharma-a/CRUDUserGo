{
    "swagger": "2.0",
    "info": {
        "description": "This API allows to user to create,get info about,update \u0026 delete a user",
        "title": "This is a RESTFul CRUD API",
        "contact": {
            "name": "vaibhav sharma",
            "url": "https://www.linkedin.com/in/sharmaaavaibhav/",
            "email": "vaibhav1863sharma@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/license/mit"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/deluser/:username": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This Routes take a JWT token for authentication and deletes the logged in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete the logged in user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{username} has been deleted from the database, You may logout",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Error: {username} does not exsits in the database",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error: There is some Internal Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login the registered users and generate JWT token",
                "parameters": [
                    {
                        "description": "User Login Credentials",
                        "name": "userlogininfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Message : User is successfully logged in!, token : tokenstring",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Could not retrieve the password from the database",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Error: invalid passowrd",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error: Could not sign the token with secret",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Take user info and update it to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userinfo"
                ],
                "summary": "Register user to the Database",
                "parameters": [
                    {
                        "description": "Info about the user",
                        "name": "userinfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UsersInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The user {username} added successfully in database",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Error: Username {username} already exists in the database",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error: Failed to hash the password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/update/:username": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Takes the information to be updated and required JWT token for the authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update the information of logged in user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Info about the user to be updated",
                        "name": "updateInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateUserInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{username} Info is successfully updated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Invalid Inputs",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error: Failed to Update info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user/:username": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This Routes take a JWT token for authentication and retrieves details of the logged in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get details of logged in user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User info retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.InfoAboutUser"
                        }
                    },
                    "404": {
                        "description": "Error: There is no such user in the database",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error: Internal Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.InfoAboutUser": {
            "description": "contains the Id,Username,Email,Timestamp when the user created in the database",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "description": "The time at which the user is registered into the database\n@eaxmple \"2024-09-20 14:32:21\"",
                    "type": "string"
                },
                "EmailAddr": {
                    "description": "Email address of the user logged in\n@example \"test@gmail.com\"",
                    "type": "string"
                },
                "UserId": {
                    "description": "Unique identifier and is automatedly genrated at the backend\n@example 2",
                    "type": "string"
                },
                "UserName": {
                    "description": "Username of the logged in user\n@example \"Vaibhav sharma\"",
                    "type": "string"
                }
            }
        },
        "models.UpdateUserInfo": {
            "description": "contains fields that can be updated by the user afer registring",
            "type": "object",
            "properties": {
                "EmailAddr": {
                    "description": "Email address of the user logged in\n@example \"test@gmail.com\"",
                    "type": "string"
                },
                "UserName": {
                    "description": "Username of the logged in user\n@example \"Vaibhav sharma\"",
                    "type": "string"
                },
                "UserPass": {
                    "description": "Userpass is the password that is used while registring the user\n@example \"123@test\"",
                    "type": "string"
                }
            }
        },
        "models.UserLoginInfo": {
            "description": "takes the info from user to log them in to the database",
            "type": "object",
            "properties": {
                "UserName": {
                    "description": "Username is name of the user used while registring\n@example \"vaibhav sharma\"",
                    "type": "string"
                },
                "UserPass": {
                    "description": "Userpass is the password that is used while registring the user\n@example \"123@test\"",
                    "type": "string"
                }
            }
        },
        "models.UsersInfo": {
            "description": "takes info about user with email, username and password",
            "type": "object",
            "properties": {
                "EmailAddr": {
                    "description": "Email is the email address of user containing '@'\n@example \"user1@gmail.com\"",
                    "type": "string"
                },
                "UserName": {
                    "description": "Username of the user being reigstered\n@example \"vaibhav sharma\"",
                    "type": "string"
                },
                "UserPass": {
                    "description": "Userpass is the password of the user\n@example \"123@test\"",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}