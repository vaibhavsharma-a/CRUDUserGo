// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "vaibhav sharma",
            "url": "https://www.linkedin.com/in/sharmaaavaibhav/",
            "email": "vaibhav1863sharma@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/license/mit"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticate user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login the registered users and generate JWT token",
                "parameters": [
                    {
                        "description": "User Login Credentials",
                        "name": "userlogininfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLoginInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Message : User is successfully logged in!, token : tokenstring",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Could not retrieve the password from the database",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Error: invalid passowrd",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error: Could not sign the token with secret",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Take user info and update it to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userinfo"
                ],
                "summary": "Register user to the Database",
                "parameters": [
                    {
                        "description": "Info about the user",
                        "name": "userinfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UsersInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The user {username} added successfully in database",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Error: Username {username} already exists in the database",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error: Failed to hash the password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.UserLoginInfo": {
            "description": "takes the info from user to log them in to the database",
            "type": "object",
            "properties": {
                "UserName": {
                    "description": "Username is name of the user used while registring\n@example \"vaibhav sharma\"",
                    "type": "string"
                },
                "UserPass": {
                    "description": "Userpass is the password that is used while registring the user\n@example \"123@test\"",
                    "type": "string"
                }
            }
        },
        "models.UsersInfo": {
            "description": "takes info about user with email, username and password",
            "type": "object",
            "properties": {
                "EmailAddr": {
                    "description": "Email is the email address of user containing '@'\n@example \"user1@gmail.com\"",
                    "type": "string"
                },
                "UserName": {
                    "description": "Username of the user being reigstered\n@example \"vaibhav sharma\"",
                    "type": "string"
                },
                "UserPass": {
                    "description": "Userpass is the password of the user\n@example \"123@test\"",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "This is a RESTFul CRUD API",
	Description:      "This API allows to user to create,get info about,update & delete a user",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
