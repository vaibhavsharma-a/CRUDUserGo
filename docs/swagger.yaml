basePath: /
definitions:
  models.UserLoginInfo:
    description: takes the info from user to log them in to the database
    properties:
      UserName:
        description: |-
          Username is name of the user used while registring
          @example "vaibhav sharma"
        type: string
      UserPass:
        description: |-
          Userpass is the password that is used while registring the user
          @example "123@test"
        type: string
    type: object
  models.UsersInfo:
    description: takes info about user with email, username and password
    properties:
      EmailAddr:
        description: |-
          Email is the email address of user containing '@'
          @example "user1@gmail.com"
        type: string
      UserName:
        description: |-
          Username of the user being reigstered
          @example "vaibhav sharma"
        type: string
      UserPass:
        description: |-
          Userpass is the password of the user
          @example "123@test"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: vaibhav1863sharma@gmail.com
    name: vaibhav sharma
    url: https://www.linkedin.com/in/sharmaaavaibhav/
  description: This API allows to user to create,get info about,update & delete a
    user
  license:
    name: MIT
    url: https://opensource.org/license/mit
  title: This is a RESTFul CRUD API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return a JWT token
      parameters:
      - description: User Login Credentials
        in: body
        name: userlogininfo
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginInfo'
      produces:
      - application/json
      responses:
        "201":
          description: 'Message : User is successfully logged in!, token : tokenstring'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Error: Could not retrieve the password from the database'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'Error: invalid passowrd'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Error: Could not sign the token with secret'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login the registered users and generate JWT token
      tags:
      - Authentication
  /register:
    post:
      consumes:
      - application/json
      description: Take user info and update it to the database
      parameters:
      - description: Info about the user
        in: body
        name: userinfo
        required: true
        schema:
          $ref: '#/definitions/models.UsersInfo'
      produces:
      - application/json
      responses:
        "201":
          description: The user {username} added successfully in database
          schema:
            type: string
        "400":
          description: 'Error: Bad Request'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: 'Error: Username {username} already exists in the database'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'Error: Failed to hash the password'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register user to the Database
      tags:
      - userinfo
swagger: "2.0"
